{"ast":null,"code":"import React,{useState,useContext,useEffect,useCallback}from'react';import{Container,Row,Col,Card,Form,Button,Tabs,Tab,Alert,Spinner,Table,Modal,ProgressBar}from'react-bootstrap';import{FontAwesomeIcon}from'@fortawesome/react-fontawesome';import{faEdit,faTrash,faSync,faCopy,faCircle}from'@fortawesome/free-solid-svg-icons';import{ChannelContext}from'../context/ChannelContext';import{AuthContext}from'../context/AuthContext';import{useNavigate}from'react-router-dom';import{channelAPI}from'../utils/api';import{jsx as _jsx,Fragment as _Fragment,jsxs as _jsxs}from\"react/jsx-runtime\";const AdminPanel=()=>{// Context\nconst{channels,loading,error,getAllChannels,cleanupInactiveChannels}=useContext(ChannelContext);const{isAdmin}=useContext(AuthContext);const navigate=useNavigate();// State for file upload\nconst[file,setFile]=useState(null);const[provider,setProvider]=useState('');// State for URL upload\nconst[url,setUrl]=useState('');const[urlProvider,setUrlProvider]=useState('');// State for credentials upload\nconst[serverUrl,setServerUrl]=useState('');const[port,setPort]=useState('80');const[username,setUsername]=useState('');const[password,setPassword]=useState('');const[credProvider,setCredProvider]=useState('');// State for UI\nconst[message,setMessage]=useState(null);const[messageType,setMessageType]=useState('info');const[dataLoaded,setDataLoaded]=useState(false);const[isProcessing,setIsProcessing]=useState(false);// State for channel editing\nconst[showEditModal,setShowEditModal]=useState(false);const[currentChannel,setCurrentChannel]=useState(null);const[editName,setEditName]=useState('');const[editUrl,setEditUrl]=useState('');const[editProvider,setEditProvider]=useState('');const[editFormat,setEditFormat]=useState('');// State for channel deletion\nconst[showDeleteModal,setShowDeleteModal]=useState(false);const[channelToDelete,setChannelToDelete]=useState(null);// State for status checking\nconst[checkingStatus,setCheckingStatus]=useState(false);const[channelBeingChecked,setChannelBeingChecked]=useState(null);// State for progress tracking\nconst[checkProgress,setCheckProgress]=useState(null);const[eventSource,setEventSource]=useState(null);const[totalChannelCount,setTotalChannelCount]=useState(0);// Load channels with pagination and get total count\nconst loadChannels=useCallback(async()=>{if(!dataLoaded&&!loading){try{// First, get the total count of channels\nconst{data}=await channelAPI.getAll({limit:10,page:1});if(data.success&&data.pagination){setTotalChannelCount(data.pagination.total);}// Then load the first page of channels for display\nawait getAllChannels({limit:100,page:1});setDataLoaded(true);}catch(error){console.error('Error loading channels:',error);setMessage('Failed to load channels. Please try again.');setMessageType('danger');}}},[getAllChannels,dataLoaded,loading]);useEffect(()=>{// Redirect if not admin\nif(!isAdmin){navigate('/');return;}// Load channels only once\nloadChannels();// Clean up event source on unmount\nreturn()=>{if(eventSource){eventSource.close();}};},[isAdmin,navigate,loadChannels,eventSource]);// File upload handler\nconst handleFileUpload=async e=>{e.preventDefault();if(!file){setMessage('Please select a file');setMessageType('danger');return;}try{setIsProcessing(true);const formData=new FormData();formData.append('file',file);formData.append('provider',provider);const{data}=await channelAPI.uploadFile(formData);setMessage(data.message);setMessageType('success');setFile(null);setProvider('');// Refresh channel list and total count\nloadChannels();}catch(error){var _error$response,_error$response$data;setMessage(((_error$response=error.response)===null||_error$response===void 0?void 0:(_error$response$data=_error$response.data)===null||_error$response$data===void 0?void 0:_error$response$data.message)||'Error uploading file');setMessageType('danger');}finally{setIsProcessing(false);}};// URL upload handler\nconst handleUrlUpload=async e=>{e.preventDefault();if(!url){setMessage('Please enter a URL');setMessageType('danger');return;}try{setIsProcessing(true);const{data}=await channelAPI.uploadFromUrl({url,provider:urlProvider});setMessage(data.message);setMessageType('success');setUrl('');setUrlProvider('');// Refresh channel list and total count\nloadChannels();}catch(error){var _error$response2,_error$response2$data;setMessage(((_error$response2=error.response)===null||_error$response2===void 0?void 0:(_error$response2$data=_error$response2.data)===null||_error$response2$data===void 0?void 0:_error$response2$data.message)||'Error uploading from URL');setMessageType('danger');}finally{setIsProcessing(false);}};// Credentials upload handler\nconst handleCredentialsUpload=async e=>{e.preventDefault();if(!serverUrl||!username||!password){setMessage('Please fill all required fields');setMessageType('danger');return;}try{setIsProcessing(true);const{data}=await channelAPI.uploadFromCredentials({serverUrl,port,username,password,provider:credProvider});setMessage(data.message);setMessageType('success');setServerUrl('');setPort('80');setUsername('');setPassword('');setCredProvider('');// Refresh channel list and total count\nloadChannels();}catch(error){var _error$response3,_error$response3$data;setMessage(((_error$response3=error.response)===null||_error$response3===void 0?void 0:(_error$response3$data=_error$response3.data)===null||_error$response3$data===void 0?void 0:_error$response3$data.message)||'Error uploading from credentials');setMessageType('danger');}finally{setIsProcessing(false);}};// Check all channels status with SSE for real-time progress updates\nconst handleCheckAllChannels=async()=>{try{setIsProcessing(true);setMessage('Checking all channels. This may take a few minutes...');setMessageType('info');// Initialize progress\nsetCheckProgress({percentage:0,processed:0,total:totalChannelCount||0,live:0});// Close any existing event source\nif(eventSource){eventSource.close();setEventSource(null);}// Get the auth token from localStorage\nconst userInfo=localStorage.getItem('userInfo');const token=userInfo?JSON.parse(userInfo).token:null;if(!token){setMessage('Authentication required. Please log in again.');setMessageType('danger');setIsProcessing(false);return;}// Create a new EventSource for SSE\nconst apiUrl=process.env.REACT_APP_API_URL||'http://localhost:5000';// Create a custom EventSource that includes credentials\nconst source=new EventSource(\"\".concat(apiUrl,\"/api/channels/check-all\"),{withCredentials:true});// Store the event source for cleanup\nsetEventSource(source);// Handle connection open\nsource.onopen=()=>{console.log('SSE connection opened');};// Handle messages\nsource.onmessage=event=>{try{const data=JSON.parse(event.data);console.log('SSE message received:',data);if(data.error){setMessage(data.error);setMessageType('danger');source.close();setEventSource(null);setIsProcessing(false);return;}// Update progress if data contains progress information\nif(data.processed!==undefined&&data.total!==undefined){setCheckProgress({percentage:data.percentage||Math.round(data.processed/data.total*100),processed:data.processed,total:data.total,live:data.live||0});}// Check if the process is complete\nif(data.done){setMessage(\"Status check completed. \".concat(data.live,\" out of \").concat(data.total,\" channels are live.\"));setMessageType('success');source.close();setEventSource(null);setIsProcessing(false);// Refresh channel list\ngetAllChannels({limit:100,page:1});}}catch(error){console.error('Error parsing SSE message:',error);}};// Handle errors\nsource.onerror=error=>{console.error('SSE error:',error);// If we can't establish a connection with SSE, fall back to polling\nif(source.readyState===2){// CLOSED\nsource.close();setEventSource(null);// Fall back to polling approach\nfallbackToPolling();}};}catch(error){var _error$response4,_error$response4$data;console.error('Error checking channels:',error);setMessage(((_error$response4=error.response)===null||_error$response4===void 0?void 0:(_error$response4$data=_error$response4.data)===null||_error$response4$data===void 0?void 0:_error$response4$data.message)||'Error checking channels');setMessageType('danger');setIsProcessing(false);// Clean up event source on error\nif(eventSource){eventSource.close();setEventSource(null);}}};// Fallback to polling if SSE fails\nconst fallbackToPolling=async()=>{try{console.log('Falling back to polling approach');setMessage('Using alternative method for progress tracking...');// Start the server-side check process\nawait channelAPI.checkAll();// Set up polling to check progress\nlet pollCount=0;const maxPolls=600;// Maximum number of polls (10 minutes at 1 second intervals)\nconst pollInterval=setInterval(async()=>{try{pollCount++;// Get the current live channel count\nconst{data:liveData}=await channelAPI.getLiveCount();if(liveData.success){// Update progress based on poll count (estimate)\nconst processed=Math.min(pollCount*100,totalChannelCount);const percentage=Math.round(processed/totalChannelCount*100);setCheckProgress({percentage:Math.min(percentage,100),processed:processed,total:totalChannelCount,live:liveData.count||0});// If we've reached the maximum polls or processed all channels, stop polling\nif(pollCount>=maxPolls||processed>=totalChannelCount){clearInterval(pollInterval);setMessage(\"Status check completed. \".concat(liveData.count,\" out of \").concat(totalChannelCount,\" channels are live.\"));setMessageType('success');setIsProcessing(false);// Refresh channel list\nawait getAllChannels({limit:100,page:1});}}}catch(error){console.error('Error polling progress:',error);// Don't stop polling on error, just log it\n}},1000);// Poll every second\n// Store the interval ID for cleanup\nsetEventSource({close:()=>clearInterval(pollInterval)});}catch(error){console.error('Error in fallback polling:',error);setMessage('Error tracking progress. Please check server logs.');setMessageType('danger');setIsProcessing(false);}};// Cleanup inactive channels\nconst handleCleanupChannels=async()=>{try{setIsProcessing(true);const{data}=await cleanupInactiveChannels();setMessage(data.message);setMessageType('success');// Refresh channel list and total count\nloadChannels();}catch(error){var _error$response5,_error$response5$data;setMessage(((_error$response5=error.response)===null||_error$response5===void 0?void 0:(_error$response5$data=_error$response5.data)===null||_error$response5$data===void 0?void 0:_error$response5$data.message)||'Error cleaning up channels');setMessageType('danger');}finally{setIsProcessing(false);}};// Check individual channel status\nconst handleCheckChannelStatus=async id=>{try{setChannelBeingChecked(id);setCheckingStatus(true);const{data}=await channelAPI.checkStatus(id);if(data.success){// Refresh the entire list instead of updating individual channel\nawait getAllChannels({limit:100,page:1});setMessage(\"Channel status updated: \".concat(data.data.isLive?'Live':'Down'));setMessageType(data.data.isLive?'success':'warning');}}catch(error){var _error$response6,_error$response6$data;setMessage(((_error$response6=error.response)===null||_error$response6===void 0?void 0:(_error$response6$data=_error$response6.data)===null||_error$response6$data===void 0?void 0:_error$response6$data.message)||'Error checking channel status');setMessageType('danger');}finally{setCheckingStatus(false);setChannelBeingChecked(null);}};// Open edit modal\nconst handleEditClick=channel=>{setCurrentChannel(channel);setEditName(channel.name);setEditUrl(channel.url);setEditProvider(channel.provider);setEditFormat(channel.format);setShowEditModal(true);};// Save channel edits\nconst handleSaveEdit=async()=>{try{setIsProcessing(true);const{data}=await channelAPI.update(currentChannel._id,{name:editName,url:editUrl,provider:editProvider,format:editFormat});if(data.success){setMessage('Channel updated successfully');setMessageType('success');setShowEditModal(false);// Refresh channel list\nawait getAllChannels({limit:100,page:1});}}catch(error){var _error$response7,_error$response7$data;setMessage(((_error$response7=error.response)===null||_error$response7===void 0?void 0:(_error$response7$data=_error$response7.data)===null||_error$response7$data===void 0?void 0:_error$response7$data.message)||'Error updating channel');setMessageType('danger');}finally{setIsProcessing(false);}};// Open delete confirmation modal\nconst handleDeleteClick=channel=>{setChannelToDelete(channel);setShowDeleteModal(true);};// Confirm channel deletion\nconst handleConfirmDelete=async()=>{try{setIsProcessing(true);const{data}=await channelAPI.delete(channelToDelete._id);if(data.success){setMessage('Channel deleted successfully');setMessageType('success');setShowDeleteModal(false);// Refresh channel list and total count\nloadChannels();}}catch(error){var _error$response8,_error$response8$data;setMessage(((_error$response8=error.response)===null||_error$response8===void 0?void 0:(_error$response8$data=_error$response8.data)===null||_error$response8$data===void 0?void 0:_error$response8$data.message)||'Error deleting channel');setMessageType('danger');}finally{setIsProcessing(false);}};// Copy channel URL to clipboard\nconst copyToClipboard=url=>{navigator.clipboard.writeText(url);setMessage('Channel URL copied to clipboard');setMessageType('info');// Clear message after 3 seconds\nsetTimeout(()=>{setMessage(null);},3000);};return/*#__PURE__*/_jsxs(Container,{className:\"py-3\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"mb-4\",children:\"Admin Panel\"}),message&&/*#__PURE__*/_jsx(Alert,{variant:messageType,onClose:()=>setMessage(null),dismissible:true,children:message}),/*#__PURE__*/_jsx(Row,{className:\"mb-4\",children:/*#__PURE__*/_jsx(Col,{children:/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsxs(Card.Body,{children:[/*#__PURE__*/_jsx(Card.Title,{children:\"Channel Management\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"d-flex mb-3\",children:[/*#__PURE__*/_jsx(Button,{variant:\"primary\",className:\"me-2\",onClick:handleCheckAllChannels,disabled:isProcessing,children:isProcessing&&checkProgress?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Spinner,{as:\"span\",animation:\"border\",size:\"sm\",role:\"status\",\"aria-hidden\":\"true\"}),/*#__PURE__*/_jsx(\"span\",{className:\"ms-2\",children:\"Checking...\"})]}):/*#__PURE__*/_jsx(_Fragment,{children:\"Check All Channels Status\"})}),/*#__PURE__*/_jsx(Button,{variant:\"danger\",onClick:handleCleanupChannels,disabled:isProcessing,children:isProcessing&&!checkProgress?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Spinner,{as:\"span\",animation:\"border\",size:\"sm\",role:\"status\",\"aria-hidden\":\"true\"}),/*#__PURE__*/_jsx(\"span\",{className:\"ms-2\",children:\"Cleaning...\"})]}):/*#__PURE__*/_jsx(_Fragment,{children:\"Cleanup Inactive Channels\"})})]}),isProcessing&&checkProgress&&/*#__PURE__*/_jsxs(\"div\",{className:\"mt-3\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"d-flex justify-content-between mb-1\",children:[/*#__PURE__*/_jsxs(\"span\",{children:[\"Progress: \",checkProgress.percentage,\"%\"]}),/*#__PURE__*/_jsxs(\"span\",{children:[checkProgress.processed,\" / \",checkProgress.total,\" channels checked\"]})]}),/*#__PURE__*/_jsx(ProgressBar,{now:checkProgress.percentage,label:\"\".concat(checkProgress.percentage,\"%\"),variant:\"info\",animated:true}),/*#__PURE__*/_jsx(\"div\",{className:\"text-center mt-1\",children:/*#__PURE__*/_jsxs(\"small\",{children:[\"Live channels found: \",checkProgress.live]})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"mt-3\",children:/*#__PURE__*/_jsxs(Alert,{variant:\"info\",children:[\"Total channels in database: \",totalChannelCount,/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"small\",{children:\"Showing up to 100 channels in the table below\"})]})})]})})})}),/*#__PURE__*/_jsx(Row,{className:\"mb-4\",children:/*#__PURE__*/_jsx(Col,{children:/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsx(Card.Body,{children:/*#__PURE__*/_jsxs(Tabs,{defaultActiveKey:\"file\",className:\"mb-3\",children:[/*#__PURE__*/_jsx(Tab,{eventKey:\"file\",title:\"Upload File\",children:/*#__PURE__*/_jsxs(Form,{onSubmit:handleFileUpload,children:[/*#__PURE__*/_jsxs(Form.Group,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"M3U/M3U8 File\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"file\",onChange:e=>setFile(e.target.files[0]),accept:\".m3u,.m3u8,.txt\",className:\"bg-dark text-light\"})]}),/*#__PURE__*/_jsxs(Form.Group,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Provider Name\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"text\",placeholder:\"Enter provider name\",value:provider,onChange:e=>setProvider(e.target.value)})]}),/*#__PURE__*/_jsx(Button,{variant:\"primary\",type:\"submit\",disabled:isProcessing,children:isProcessing?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Spinner,{as:\"span\",animation:\"border\",size:\"sm\",role:\"status\",\"aria-hidden\":\"true\"}),/*#__PURE__*/_jsx(\"span\",{className:\"ms-2\",children:\"Uploading...\"})]}):/*#__PURE__*/_jsx(_Fragment,{children:\"Upload\"})})]})}),/*#__PURE__*/_jsx(Tab,{eventKey:\"url\",title:\"From URL\",children:/*#__PURE__*/_jsxs(Form,{onSubmit:handleUrlUpload,children:[/*#__PURE__*/_jsxs(Form.Group,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"M3U/M3U8 URL\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"url\",placeholder:\"Enter M3U/M3U8 URL\",value:url,onChange:e=>setUrl(e.target.value)})]}),/*#__PURE__*/_jsxs(Form.Group,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Provider Name\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"text\",placeholder:\"Enter provider name\",value:urlProvider,onChange:e=>setUrlProvider(e.target.value)})]}),/*#__PURE__*/_jsx(Button,{variant:\"primary\",type:\"submit\",disabled:isProcessing,children:isProcessing?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Spinner,{as:\"span\",animation:\"border\",size:\"sm\",role:\"status\",\"aria-hidden\":\"true\"}),/*#__PURE__*/_jsx(\"span\",{className:\"ms-2\",children:\"Processing...\"})]}):/*#__PURE__*/_jsx(_Fragment,{children:\"Upload\"})})]})}),/*#__PURE__*/_jsx(Tab,{eventKey:\"credentials\",title:\"From Credentials\",children:/*#__PURE__*/_jsxs(Form,{onSubmit:handleCredentialsUpload,children:[/*#__PURE__*/_jsxs(Form.Group,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Server URL\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"text\",placeholder:\"Enter server URL\",value:serverUrl,onChange:e=>setServerUrl(e.target.value)})]}),/*#__PURE__*/_jsxs(Form.Group,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Port\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"text\",placeholder:\"Enter port\",value:port,onChange:e=>setPort(e.target.value)})]}),/*#__PURE__*/_jsxs(Form.Group,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Username\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"text\",placeholder:\"Enter username\",value:username,onChange:e=>setUsername(e.target.value)})]}),/*#__PURE__*/_jsxs(Form.Group,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Password\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"password\",placeholder:\"Enter password\",value:password,onChange:e=>setPassword(e.target.value)})]}),/*#__PURE__*/_jsxs(Form.Group,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Provider Name\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"text\",placeholder:\"Enter provider name\",value:credProvider,onChange:e=>setCredProvider(e.target.value)})]}),/*#__PURE__*/_jsx(Button,{variant:\"primary\",type:\"submit\",disabled:isProcessing,children:isProcessing?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Spinner,{as:\"span\",animation:\"border\",size:\"sm\",role:\"status\",\"aria-hidden\":\"true\"}),/*#__PURE__*/_jsx(\"span\",{className:\"ms-2\",children:\"Processing...\"})]}):/*#__PURE__*/_jsx(_Fragment,{children:\"Upload\"})})]})})]})})})})}),/*#__PURE__*/_jsx(Row,{children:/*#__PURE__*/_jsx(Col,{children:/*#__PURE__*/_jsx(Card,{children:/*#__PURE__*/_jsxs(Card.Body,{children:[/*#__PURE__*/_jsx(Card.Title,{children:\"All Channels\"}),loading?/*#__PURE__*/_jsxs(\"div\",{className:\"text-center py-4\",children:[/*#__PURE__*/_jsx(Spinner,{animation:\"border\",role:\"status\",children:/*#__PURE__*/_jsx(\"span\",{className:\"visually-hidden\",children:\"Loading...\"})}),/*#__PURE__*/_jsx(\"p\",{className:\"mt-2\",children:\"Loading channels...\"})]}):error?/*#__PURE__*/_jsx(Alert,{variant:\"danger\",children:error}):channels.length===0?/*#__PURE__*/_jsx(Alert,{variant:\"info\",children:\"No channels found. Upload some channels to get started.\"}):/*#__PURE__*/_jsx(\"div\",{className:\"table-responsive\",children:/*#__PURE__*/_jsxs(Table,{striped:true,bordered:true,hover:true,className:\"bg-dark text-light\",children:[/*#__PURE__*/_jsx(\"thead\",{children:/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"th\",{children:\"Status\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Channel Name\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Provider\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Format\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Last Checked\"}),/*#__PURE__*/_jsx(\"th\",{children:\"Actions\"})]})}),/*#__PURE__*/_jsx(\"tbody\",{children:channels.map(channel=>/*#__PURE__*/_jsxs(\"tr\",{children:[/*#__PURE__*/_jsx(\"td\",{className:\"text-center\",children:/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faCircle,color:channel.isLive?'green':'red',title:channel.isLive?'Live':'Down'})}),/*#__PURE__*/_jsx(\"td\",{children:channel.name}),/*#__PURE__*/_jsx(\"td\",{children:channel.provider}),/*#__PURE__*/_jsx(\"td\",{children:channel.format.toUpperCase()}),/*#__PURE__*/_jsx(\"td\",{children:channel.lastChecked?new Date(channel.lastChecked).toLocaleString():'Never'}),/*#__PURE__*/_jsxs(\"td\",{children:[/*#__PURE__*/_jsx(Button,{variant:\"outline-secondary\",size:\"sm\",className:\"me-1\",onClick:()=>handleCheckChannelStatus(channel._id),disabled:checkingStatus&&channelBeingChecked===channel._id,children:checkingStatus&&channelBeingChecked===channel._id?/*#__PURE__*/_jsx(Spinner,{as:\"span\",animation:\"border\",size:\"sm\",role:\"status\",\"aria-hidden\":\"true\"}):/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faSync})}),/*#__PURE__*/_jsx(Button,{variant:\"outline-primary\",size:\"sm\",className:\"me-1\",onClick:()=>copyToClipboard(channel.url),children:/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faCopy})}),/*#__PURE__*/_jsx(Button,{variant:\"outline-info\",size:\"sm\",className:\"me-1\",onClick:()=>handleEditClick(channel),children:/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faEdit})}),/*#__PURE__*/_jsx(Button,{variant:\"outline-danger\",size:\"sm\",onClick:()=>handleDeleteClick(channel),children:/*#__PURE__*/_jsx(FontAwesomeIcon,{icon:faTrash})})]})]},channel._id))})]})})]})})})}),/*#__PURE__*/_jsxs(Modal,{show:showEditModal,onHide:()=>setShowEditModal(false),children:[/*#__PURE__*/_jsx(Modal.Header,{closeButton:true,children:/*#__PURE__*/_jsx(Modal.Title,{children:\"Edit Channel\"})}),/*#__PURE__*/_jsx(Modal.Body,{children:/*#__PURE__*/_jsxs(Form,{children:[/*#__PURE__*/_jsxs(Form.Group,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Channel Name\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"text\",value:editName,onChange:e=>setEditName(e.target.value)})]}),/*#__PURE__*/_jsxs(Form.Group,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Channel URL\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"text\",value:editUrl,onChange:e=>setEditUrl(e.target.value)})]}),/*#__PURE__*/_jsxs(Form.Group,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Provider\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"text\",value:editProvider,onChange:e=>setEditProvider(e.target.value)})]}),/*#__PURE__*/_jsxs(Form.Group,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Format\"}),/*#__PURE__*/_jsxs(Form.Select,{value:editFormat,onChange:e=>setEditFormat(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"m3u\",children:\"M3U\"}),/*#__PURE__*/_jsx(\"option\",{value:\"m3u8\",children:\"M3U8\"}),/*#__PURE__*/_jsx(\"option\",{value:\"mp4\",children:\"MP4\"}),/*#__PURE__*/_jsx(\"option\",{value:\"hls\",children:\"HLS\"}),/*#__PURE__*/_jsx(\"option\",{value:\"other\",children:\"Other\"})]})]})]})}),/*#__PURE__*/_jsxs(Modal.Footer,{children:[/*#__PURE__*/_jsx(Button,{variant:\"secondary\",onClick:()=>setShowEditModal(false),children:\"Cancel\"}),/*#__PURE__*/_jsx(Button,{variant:\"primary\",onClick:handleSaveEdit,disabled:isProcessing,children:isProcessing?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Spinner,{as:\"span\",animation:\"border\",size:\"sm\",role:\"status\",\"aria-hidden\":\"true\"}),/*#__PURE__*/_jsx(\"span\",{className:\"ms-2\",children:\"Saving...\"})]}):/*#__PURE__*/_jsx(_Fragment,{children:\"Save Changes\"})})]})]}),/*#__PURE__*/_jsxs(Modal,{show:showDeleteModal,onHide:()=>setShowDeleteModal(false),children:[/*#__PURE__*/_jsx(Modal.Header,{closeButton:true,children:/*#__PURE__*/_jsx(Modal.Title,{children:\"Confirm Deletion\"})}),/*#__PURE__*/_jsxs(Modal.Body,{children:[\"Are you sure you want to delete the channel \\\"\",channelToDelete===null||channelToDelete===void 0?void 0:channelToDelete.name,\"\\\"? This action cannot be undone.\"]}),/*#__PURE__*/_jsxs(Modal.Footer,{children:[/*#__PURE__*/_jsx(Button,{variant:\"secondary\",onClick:()=>setShowDeleteModal(false),children:\"Cancel\"}),/*#__PURE__*/_jsx(Button,{variant:\"danger\",onClick:handleConfirmDelete,disabled:isProcessing,children:isProcessing?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Spinner,{as:\"span\",animation:\"border\",size:\"sm\",role:\"status\",\"aria-hidden\":\"true\"}),/*#__PURE__*/_jsx(\"span\",{className:\"ms-2\",children:\"Deleting...\"})]}):/*#__PURE__*/_jsx(_Fragment,{children:\"Delete\"})})]})]})]});};export default AdminPanel;","map":{"version":3,"names":["React","useState","useContext","useEffect","useCallback","Container","Row","Col","Card","Form","Button","Tabs","Tab","Alert","Spinner","Table","Modal","ProgressBar","FontAwesomeIcon","faEdit","faTrash","faSync","faCopy","faCircle","ChannelContext","AuthContext","useNavigate","channelAPI","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","AdminPanel","channels","loading","error","getAllChannels","cleanupInactiveChannels","isAdmin","navigate","file","setFile","provider","setProvider","url","setUrl","urlProvider","setUrlProvider","serverUrl","setServerUrl","port","setPort","username","setUsername","password","setPassword","credProvider","setCredProvider","message","setMessage","messageType","setMessageType","dataLoaded","setDataLoaded","isProcessing","setIsProcessing","showEditModal","setShowEditModal","currentChannel","setCurrentChannel","editName","setEditName","editUrl","setEditUrl","editProvider","setEditProvider","editFormat","setEditFormat","showDeleteModal","setShowDeleteModal","channelToDelete","setChannelToDelete","checkingStatus","setCheckingStatus","channelBeingChecked","setChannelBeingChecked","checkProgress","setCheckProgress","eventSource","setEventSource","totalChannelCount","setTotalChannelCount","loadChannels","data","getAll","limit","page","success","pagination","total","console","close","handleFileUpload","e","preventDefault","formData","FormData","append","uploadFile","_error$response","_error$response$data","response","handleUrlUpload","uploadFromUrl","_error$response2","_error$response2$data","handleCredentialsUpload","uploadFromCredentials","_error$response3","_error$response3$data","handleCheckAllChannels","percentage","processed","live","userInfo","localStorage","getItem","token","JSON","parse","apiUrl","process","env","REACT_APP_API_URL","source","EventSource","concat","withCredentials","onopen","log","onmessage","event","undefined","Math","round","done","onerror","readyState","fallbackToPolling","_error$response4","_error$response4$data","checkAll","pollCount","maxPolls","pollInterval","setInterval","liveData","getLiveCount","min","count","clearInterval","handleCleanupChannels","_error$response5","_error$response5$data","handleCheckChannelStatus","id","checkStatus","isLive","_error$response6","_error$response6$data","handleEditClick","channel","name","format","handleSaveEdit","update","_id","_error$response7","_error$response7$data","handleDeleteClick","handleConfirmDelete","delete","_error$response8","_error$response8$data","copyToClipboard","navigator","clipboard","writeText","setTimeout","className","children","variant","onClose","dismissible","Body","Title","onClick","disabled","as","animation","size","role","now","label","animated","defaultActiveKey","eventKey","title","onSubmit","Group","Label","Control","type","onChange","target","files","accept","placeholder","value","length","striped","bordered","hover","map","icon","color","toUpperCase","lastChecked","Date","toLocaleString","show","onHide","Header","closeButton","Select","Footer"],"sources":["/var/www/iptv-manager/frontend/src/pages/AdminPanel.js"],"sourcesContent":["import React, { useState, useContext, useEffect, useCallback } from 'react';\r\nimport { Container, Row, Col, Card, Form, Button, Tabs, Tab, Alert, Spinner, Table, Modal, ProgressBar } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEdit, faTrash, faSync, faCopy, faCircle } from '@fortawesome/free-solid-svg-icons';\r\nimport { ChannelContext } from '../context/ChannelContext';\r\nimport { AuthContext } from '../context/AuthContext';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { channelAPI } from '../utils/api';\r\n\r\nconst AdminPanel = () => {\r\n  // Context\r\n  const { \r\n    channels,\r\n    loading,\r\n    error,\r\n    getAllChannels,\r\n    cleanupInactiveChannels\r\n  } = useContext(ChannelContext);\r\n  \r\n  const { isAdmin } = useContext(AuthContext);\r\n  const navigate = useNavigate();\r\n  \r\n  // State for file upload\r\n  const [file, setFile] = useState(null);\r\n  const [provider, setProvider] = useState('');\r\n  \r\n  // State for URL upload\r\n  const [url, setUrl] = useState('');\r\n  const [urlProvider, setUrlProvider] = useState('');\r\n  \r\n  // State for credentials upload\r\n  const [serverUrl, setServerUrl] = useState('');\r\n  const [port, setPort] = useState('80');\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [credProvider, setCredProvider] = useState('');\r\n  \r\n  // State for UI\r\n  const [message, setMessage] = useState(null);\r\n  const [messageType, setMessageType] = useState('info');\r\n  const [dataLoaded, setDataLoaded] = useState(false);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  \r\n  // State for channel editing\r\n  const [showEditModal, setShowEditModal] = useState(false);\r\n  const [currentChannel, setCurrentChannel] = useState(null);\r\n  const [editName, setEditName] = useState('');\r\n  const [editUrl, setEditUrl] = useState('');\r\n  const [editProvider, setEditProvider] = useState('');\r\n  const [editFormat, setEditFormat] = useState('');\r\n  \r\n  // State for channel deletion\r\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\r\n  const [channelToDelete, setChannelToDelete] = useState(null);\r\n  \r\n  // State for status checking\r\n  const [checkingStatus, setCheckingStatus] = useState(false);\r\n  const [channelBeingChecked, setChannelBeingChecked] = useState(null);\r\n  \r\n  // State for progress tracking\r\n  const [checkProgress, setCheckProgress] = useState(null);\r\n  const [eventSource, setEventSource] = useState(null);\r\n  const [totalChannelCount, setTotalChannelCount] = useState(0);\r\n\r\n  // Load channels with pagination and get total count\r\n  const loadChannels = useCallback(async () => {\r\n    if (!dataLoaded && !loading) {\r\n      try {\r\n        // First, get the total count of channels\r\n        const { data } = await channelAPI.getAll({ limit: 10, page: 1 });\r\n        if (data.success && data.pagination) {\r\n          setTotalChannelCount(data.pagination.total);\r\n        }\r\n        \r\n        // Then load the first page of channels for display\r\n        await getAllChannels({ limit: 100, page: 1 });\r\n        setDataLoaded(true);\r\n      } catch (error) {\r\n        console.error('Error loading channels:', error);\r\n        setMessage('Failed to load channels. Please try again.');\r\n        setMessageType('danger');\r\n      }\r\n    }\r\n  }, [getAllChannels, dataLoaded, loading]);\r\n\r\n  useEffect(() => {\r\n    // Redirect if not admin\r\n    if (!isAdmin) {\r\n      navigate('/');\r\n      return;\r\n    }\r\n    \r\n    // Load channels only once\r\n    loadChannels();\r\n    \r\n    // Clean up event source on unmount\r\n    return () => {\r\n      if (eventSource) {\r\n        eventSource.close();\r\n      }\r\n    };\r\n  }, [isAdmin, navigate, loadChannels, eventSource]);\r\n\r\n  // File upload handler\r\n  const handleFileUpload = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!file) {\r\n      setMessage('Please select a file');\r\n      setMessageType('danger');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      setIsProcessing(true);\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n      formData.append('provider', provider);\r\n      \r\n      const { data } = await channelAPI.uploadFile(formData);\r\n      \r\n      setMessage(data.message);\r\n      setMessageType('success');\r\n      setFile(null);\r\n      setProvider('');\r\n      \r\n      // Refresh channel list and total count\r\n      loadChannels();\r\n    } catch (error) {\r\n      setMessage(error.response?.data?.message || 'Error uploading file');\r\n      setMessageType('danger');\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  // URL upload handler\r\n  const handleUrlUpload = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!url) {\r\n      setMessage('Please enter a URL');\r\n      setMessageType('danger');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      setIsProcessing(true);\r\n      const { data } = await channelAPI.uploadFromUrl({ url, provider: urlProvider });\r\n      \r\n      setMessage(data.message);\r\n      setMessageType('success');\r\n      setUrl('');\r\n      setUrlProvider('');\r\n      \r\n      // Refresh channel list and total count\r\n      loadChannels();\r\n    } catch (error) {\r\n      setMessage(error.response?.data?.message || 'Error uploading from URL');\r\n      setMessageType('danger');\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  // Credentials upload handler\r\n  const handleCredentialsUpload = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    if (!serverUrl || !username || !password) {\r\n      setMessage('Please fill all required fields');\r\n      setMessageType('danger');\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      setIsProcessing(true);\r\n      const { data } = await channelAPI.uploadFromCredentials({\r\n        serverUrl,\r\n        port,\r\n        username,\r\n        password,\r\n        provider: credProvider\r\n      });\r\n      \r\n      setMessage(data.message);\r\n      setMessageType('success');\r\n      setServerUrl('');\r\n      setPort('80');\r\n      setUsername('');\r\n      setPassword('');\r\n      setCredProvider('');\r\n      \r\n      // Refresh channel list and total count\r\n      loadChannels();\r\n    } catch (error) {\r\n      setMessage(error.response?.data?.message || 'Error uploading from credentials');\r\n      setMessageType('danger');\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  // Check all channels status with SSE for real-time progress updates\r\n  const handleCheckAllChannels = async () => {\r\n    try {\r\n      setIsProcessing(true);\r\n      setMessage('Checking all channels. This may take a few minutes...');\r\n      setMessageType('info');\r\n      \r\n      // Initialize progress\r\n      setCheckProgress({\r\n        percentage: 0,\r\n        processed: 0,\r\n        total: totalChannelCount || 0,\r\n        live: 0\r\n      });\r\n      \r\n      // Close any existing event source\r\n      if (eventSource) {\r\n        eventSource.close();\r\n        setEventSource(null);\r\n      }\r\n      \r\n      // Get the auth token from localStorage\r\n      const userInfo = localStorage.getItem('userInfo');\r\n      const token = userInfo ? JSON.parse(userInfo).token : null;\r\n      \r\n      if (!token) {\r\n        setMessage('Authentication required. Please log in again.');\r\n        setMessageType('danger');\r\n        setIsProcessing(false);\r\n        return;\r\n      }\r\n      \r\n      // Create a new EventSource for SSE\r\n      const apiUrl = process.env.REACT_APP_API_URL || 'http://localhost:5000';\r\n      \r\n      // Create a custom EventSource that includes credentials\r\n      const source = new EventSource(`${apiUrl}/api/channels/check-all`, { \r\n        withCredentials: true \r\n      });\r\n      \r\n      // Store the event source for cleanup\r\n      setEventSource(source);\r\n      \r\n      // Handle connection open\r\n      source.onopen = () => {\r\n        console.log('SSE connection opened');\r\n      };\r\n      \r\n      // Handle messages\r\n      source.onmessage = (event) => {\r\n        try {\r\n          const data = JSON.parse(event.data);\r\n          console.log('SSE message received:', data);\r\n          \r\n          if (data.error) {\r\n            setMessage(data.error);\r\n            setMessageType('danger');\r\n            source.close();\r\n            setEventSource(null);\r\n            setIsProcessing(false);\r\n            return;\r\n          }\r\n          \r\n          // Update progress if data contains progress information\r\n          if (data.processed !== undefined && data.total !== undefined) {\r\n            setCheckProgress({\r\n              percentage: data.percentage || Math.round((data.processed / data.total) * 100),\r\n              processed: data.processed,\r\n              total: data.total,\r\n              live: data.live || 0\r\n            });\r\n          }\r\n          \r\n          // Check if the process is complete\r\n          if (data.done) {\r\n            setMessage(`Status check completed. ${data.live} out of ${data.total} channels are live.`);\r\n            setMessageType('success');\r\n            source.close();\r\n            setEventSource(null);\r\n            setIsProcessing(false);\r\n            \r\n            // Refresh channel list\r\n            getAllChannels({ limit: 100, page: 1 });\r\n          }\r\n        } catch (error) {\r\n          console.error('Error parsing SSE message:', error);\r\n        }\r\n      };\r\n      \r\n      // Handle errors\r\n      source.onerror = (error) => {\r\n        console.error('SSE error:', error);\r\n        \r\n        // If we can't establish a connection with SSE, fall back to polling\r\n        if (source.readyState === 2) { // CLOSED\r\n          source.close();\r\n          setEventSource(null);\r\n          \r\n          // Fall back to polling approach\r\n          fallbackToPolling();\r\n        }\r\n      };\r\n      \r\n    } catch (error) {\r\n      console.error('Error checking channels:', error);\r\n      setMessage(error.response?.data?.message || 'Error checking channels');\r\n      setMessageType('danger');\r\n      setIsProcessing(false);\r\n      \r\n      // Clean up event source on error\r\n      if (eventSource) {\r\n        eventSource.close();\r\n        setEventSource(null);\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Fallback to polling if SSE fails\r\n  const fallbackToPolling = async () => {\r\n    try {\r\n      console.log('Falling back to polling approach');\r\n      setMessage('Using alternative method for progress tracking...');\r\n      \r\n      // Start the server-side check process\r\n      await channelAPI.checkAll();\r\n      \r\n      // Set up polling to check progress\r\n      let pollCount = 0;\r\n      const maxPolls = 600; // Maximum number of polls (10 minutes at 1 second intervals)\r\n      \r\n      const pollInterval = setInterval(async () => {\r\n        try {\r\n          pollCount++;\r\n          \r\n          // Get the current live channel count\r\n          const { data: liveData } = await channelAPI.getLiveCount();\r\n          \r\n          if (liveData.success) {\r\n            // Update progress based on poll count (estimate)\r\n            const processed = Math.min(pollCount * 100, totalChannelCount);\r\n            const percentage = Math.round((processed / totalChannelCount) * 100);\r\n            \r\n            setCheckProgress({\r\n              percentage: Math.min(percentage, 100),\r\n              processed: processed,\r\n              total: totalChannelCount,\r\n              live: liveData.count || 0\r\n            });\r\n            \r\n            // If we've reached the maximum polls or processed all channels, stop polling\r\n            if (pollCount >= maxPolls || processed >= totalChannelCount) {\r\n              clearInterval(pollInterval);\r\n              setMessage(`Status check completed. ${liveData.count} out of ${totalChannelCount} channels are live.`);\r\n              setMessageType('success');\r\n              setIsProcessing(false);\r\n              \r\n              // Refresh channel list\r\n              await getAllChannels({ limit: 100, page: 1 });\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error('Error polling progress:', error);\r\n          // Don't stop polling on error, just log it\r\n        }\r\n      }, 1000); // Poll every second\r\n      \r\n      // Store the interval ID for cleanup\r\n      setEventSource({ close: () => clearInterval(pollInterval) });\r\n      \r\n    } catch (error) {\r\n      console.error('Error in fallback polling:', error);\r\n      setMessage('Error tracking progress. Please check server logs.');\r\n      setMessageType('danger');\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  // Cleanup inactive channels\r\n  const handleCleanupChannels = async () => {\r\n    try {\r\n      setIsProcessing(true);\r\n      const { data } = await cleanupInactiveChannels();\r\n      \r\n      setMessage(data.message);\r\n      setMessageType('success');\r\n      \r\n      // Refresh channel list and total count\r\n      loadChannels();\r\n    } catch (error) {\r\n      setMessage(error.response?.data?.message || 'Error cleaning up channels');\r\n      setMessageType('danger');\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  // Check individual channel status\r\n  const handleCheckChannelStatus = async (id) => {\r\n    try {\r\n      setChannelBeingChecked(id);\r\n      setCheckingStatus(true);\r\n      \r\n      const { data } = await channelAPI.checkStatus(id);\r\n      \r\n      if (data.success) {\r\n        // Refresh the entire list instead of updating individual channel\r\n        await getAllChannels({ limit: 100, page: 1 });\r\n        \r\n        setMessage(`Channel status updated: ${data.data.isLive ? 'Live' : 'Down'}`);\r\n        setMessageType(data.data.isLive ? 'success' : 'warning');\r\n      }\r\n    } catch (error) {\r\n      setMessage(error.response?.data?.message || 'Error checking channel status');\r\n      setMessageType('danger');\r\n    } finally {\r\n      setCheckingStatus(false);\r\n      setChannelBeingChecked(null);\r\n    }\r\n  };\r\n\r\n  // Open edit modal\r\n  const handleEditClick = (channel) => {\r\n    setCurrentChannel(channel);\r\n    setEditName(channel.name);\r\n    setEditUrl(channel.url);\r\n    setEditProvider(channel.provider);\r\n    setEditFormat(channel.format);\r\n    setShowEditModal(true);\r\n  };\r\n\r\n  // Save channel edits\r\n  const handleSaveEdit = async () => {\r\n    try {\r\n      setIsProcessing(true);\r\n      \r\n      const { data } = await channelAPI.update(currentChannel._id, {\r\n        name: editName,\r\n        url: editUrl,\r\n        provider: editProvider,\r\n        format: editFormat\r\n      });\r\n      \r\n      if (data.success) {\r\n        setMessage('Channel updated successfully');\r\n        setMessageType('success');\r\n        setShowEditModal(false);\r\n        \r\n        // Refresh channel list\r\n        await getAllChannels({ limit: 100, page: 1 });\r\n      }\r\n    } catch (error) {\r\n      setMessage(error.response?.data?.message || 'Error updating channel');\r\n      setMessageType('danger');\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  // Open delete confirmation modal\r\n  const handleDeleteClick = (channel) => {\r\n    setChannelToDelete(channel);\r\n    setShowDeleteModal(true);\r\n  };\r\n\r\n  // Confirm channel deletion\r\n  const handleConfirmDelete = async () => {\r\n    try {\r\n      setIsProcessing(true);\r\n      \r\n      const { data } = await channelAPI.delete(channelToDelete._id);\r\n      \r\n      if (data.success) {\r\n        setMessage('Channel deleted successfully');\r\n        setMessageType('success');\r\n        setShowDeleteModal(false);\r\n        \r\n        // Refresh channel list and total count\r\n        loadChannels();\r\n      }\r\n    } catch (error) {\r\n      setMessage(error.response?.data?.message || 'Error deleting channel');\r\n      setMessageType('danger');\r\n    } finally {\r\n      setIsProcessing(false);\r\n    }\r\n  };\r\n\r\n  // Copy channel URL to clipboard\r\n  const copyToClipboard = (url) => {\r\n    navigator.clipboard.writeText(url);\r\n    setMessage('Channel URL copied to clipboard');\r\n    setMessageType('info');\r\n    \r\n    // Clear message after 3 seconds\r\n    setTimeout(() => {\r\n      setMessage(null);\r\n    }, 3000);\r\n  };\r\n\r\n  return (\r\n    <Container className=\"py-3\">\r\n      <h1 className=\"mb-4\">Admin Panel</h1>\r\n      \r\n      {message && (\r\n        <Alert variant={messageType} onClose={() => setMessage(null)} dismissible>\r\n          {message}\r\n        </Alert>\r\n      )}\r\n      \r\n      <Row className=\"mb-4\">\r\n        <Col>\r\n          <Card>\r\n            <Card.Body>\r\n              <Card.Title>Channel Management</Card.Title>\r\n              <div className=\"d-flex mb-3\">\r\n                <Button \r\n                  variant=\"primary\" \r\n                  className=\"me-2\"\r\n                  onClick={handleCheckAllChannels}\r\n                  disabled={isProcessing}\r\n                >\r\n                  {isProcessing && checkProgress ? (\r\n                    <>\r\n                      <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\r\n                      <span className=\"ms-2\">Checking...</span>\r\n                    </>\r\n                  ) : (\r\n                    <>Check All Channels Status</>\r\n                  )}\r\n                </Button>\r\n                <Button \r\n                  variant=\"danger\"\r\n                  onClick={handleCleanupChannels}\r\n                  disabled={isProcessing}\r\n                >\r\n                  {isProcessing && !checkProgress ? (\r\n                    <>\r\n                      <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\r\n                      <span className=\"ms-2\">Cleaning...</span>\r\n                    </>\r\n                  ) : (\r\n                    <>Cleanup Inactive Channels</>\r\n                  )}\r\n                </Button>\r\n              </div>\r\n              \r\n              {/* Progress bar for channel checking */}\r\n              {isProcessing && checkProgress && (\r\n                <div className=\"mt-3\">\r\n                  <div className=\"d-flex justify-content-between mb-1\">\r\n                    <span>Progress: {checkProgress.percentage}%</span>\r\n                    <span>{checkProgress.processed} / {checkProgress.total} channels checked</span>\r\n                  </div>\r\n                  <ProgressBar \r\n                    now={checkProgress.percentage} \r\n                    label={`${checkProgress.percentage}%`} \r\n                    variant=\"info\" \r\n                    animated\r\n                  />\r\n                  <div className=\"text-center mt-1\">\r\n                    <small>Live channels found: {checkProgress.live}</small>\r\n                  </div>\r\n                </div>\r\n              )}\r\n              \r\n              {/* Display total channel count */}\r\n              <div className=\"mt-3\">\r\n                <Alert variant=\"info\">\r\n                  Total channels in database: {totalChannelCount}\r\n                  <br />\r\n                  <small>Showing up to 100 channels in the table below</small>\r\n                </Alert>\r\n              </div>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      \r\n      <Row className=\"mb-4\">\r\n        <Col>\r\n          <Card>\r\n            <Card.Body>\r\n              <Tabs defaultActiveKey=\"file\" className=\"mb-3\">\r\n                <Tab eventKey=\"file\" title=\"Upload File\">\r\n                  <Form onSubmit={handleFileUpload}>\r\n                    <Form.Group className=\"mb-3\">\r\n                      <Form.Label>M3U/M3U8 File</Form.Label>\r\n                      <Form.Control \r\n                        type=\"file\" \r\n                        onChange={(e) => setFile(e.target.files[0])}\r\n                        accept=\".m3u,.m3u8,.txt\"\r\n                        className=\"bg-dark text-light\"\r\n                      />\r\n                    </Form.Group>\r\n                    \r\n                    <Form.Group className=\"mb-3\">\r\n                      <Form.Label>Provider Name</Form.Label>\r\n                      <Form.Control \r\n                        type=\"text\" \r\n                        placeholder=\"Enter provider name\"\r\n                        value={provider}\r\n                        onChange={(e) => setProvider(e.target.value)}\r\n                      />\r\n                    </Form.Group>\r\n                    \r\n                    <Button variant=\"primary\" type=\"submit\" disabled={isProcessing}>\r\n                      {isProcessing ? (\r\n                        <>\r\n                          <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\r\n                          <span className=\"ms-2\">Uploading...</span>\r\n                        </>\r\n                      ) : (\r\n                        <>Upload</>\r\n                      )}\r\n                    </Button>\r\n                  </Form>\r\n                </Tab>\r\n                \r\n                <Tab eventKey=\"url\" title=\"From URL\">\r\n                  <Form onSubmit={handleUrlUpload}>\r\n                    <Form.Group className=\"mb-3\">\r\n                      <Form.Label>M3U/M3U8 URL</Form.Label>\r\n                      <Form.Control \r\n                        type=\"url\" \r\n                        placeholder=\"Enter M3U/M3U8 URL\"\r\n                        value={url}\r\n                        onChange={(e) => setUrl(e.target.value)}\r\n                      />\r\n                    </Form.Group>\r\n                    \r\n                    <Form.Group className=\"mb-3\">\r\n                      <Form.Label>Provider Name</Form.Label>\r\n                      <Form.Control \r\n                        type=\"text\" \r\n                        placeholder=\"Enter provider name\"\r\n                        value={urlProvider}\r\n                        onChange={(e) => setUrlProvider(e.target.value)}\r\n                      />\r\n                    </Form.Group>\r\n                    \r\n                    <Button variant=\"primary\" type=\"submit\" disabled={isProcessing}>\r\n                      {isProcessing ? (\r\n                        <>\r\n                          <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\r\n                          <span className=\"ms-2\">Processing...</span>\r\n                        </>\r\n                      ) : (\r\n                        <>Upload</>\r\n                      )}\r\n                    </Button>\r\n                  </Form>\r\n                </Tab>\r\n                \r\n                <Tab eventKey=\"credentials\" title=\"From Credentials\">\r\n                  <Form onSubmit={handleCredentialsUpload}>\r\n                    <Form.Group className=\"mb-3\">\r\n                      <Form.Label>Server URL</Form.Label>\r\n                      <Form.Control \r\n                        type=\"text\" \r\n                        placeholder=\"Enter server URL\"\r\n                        value={serverUrl}\r\n                        onChange={(e) => setServerUrl(e.target.value)}\r\n                      />\r\n                    </Form.Group>\r\n                    \r\n                    <Form.Group className=\"mb-3\">\r\n                      <Form.Label>Port</Form.Label>\r\n                      <Form.Control \r\n                        type=\"text\" \r\n                        placeholder=\"Enter port\"\r\n                        value={port}\r\n                        onChange={(e) => setPort(e.target.value)}\r\n                      />\r\n                    </Form.Group>\r\n                    \r\n                    <Form.Group className=\"mb-3\">\r\n                      <Form.Label>Username</Form.Label>\r\n                      <Form.Control \r\n                        type=\"text\" \r\n                        placeholder=\"Enter username\"\r\n                        value={username}\r\n                        onChange={(e) => setUsername(e.target.value)}\r\n                      />\r\n                    </Form.Group>\r\n                    \r\n                    <Form.Group className=\"mb-3\">\r\n                      <Form.Label>Password</Form.Label>\r\n                      <Form.Control \r\n                        type=\"password\" \r\n                        placeholder=\"Enter password\"\r\n                        value={password}\r\n                        onChange={(e) => setPassword(e.target.value)}\r\n                      />\r\n                    </Form.Group>\r\n                    \r\n                    <Form.Group className=\"mb-3\">\r\n                      <Form.Label>Provider Name</Form.Label>\r\n                      <Form.Control \r\n                        type=\"text\" \r\n                        placeholder=\"Enter provider name\"\r\n                        value={credProvider}\r\n                        onChange={(e) => setCredProvider(e.target.value)}\r\n                      />\r\n                    </Form.Group>\r\n                    \r\n                    <Button variant=\"primary\" type=\"submit\" disabled={isProcessing}>\r\n                      {isProcessing ? (\r\n                        <>\r\n                          <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\r\n                          <span className=\"ms-2\">Processing...</span>\r\n                        </>\r\n                      ) : (\r\n                        <>Upload</>\r\n                      )}\r\n                    </Button>\r\n                  </Form>\r\n                </Tab>\r\n              </Tabs>\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      \r\n      <Row>\r\n        <Col>\r\n          <Card>\r\n            <Card.Body>\r\n              <Card.Title>All Channels</Card.Title>\r\n              {loading ? (\r\n                <div className=\"text-center py-4\">\r\n                  <Spinner animation=\"border\" role=\"status\">\r\n                    <span className=\"visually-hidden\">Loading...</span>\r\n                  </Spinner>\r\n                  <p className=\"mt-2\">Loading channels...</p>\r\n                </div>\r\n              ) : error ? (\r\n                <Alert variant=\"danger\">{error}</Alert>\r\n              ) : channels.length === 0 ? (\r\n                <Alert variant=\"info\">No channels found. Upload some channels to get started.</Alert>\r\n              ) : (\r\n                <div className=\"table-responsive\">\r\n                  <Table striped bordered hover className=\"bg-dark text-light\">\r\n                    <thead>\r\n                      <tr>\r\n                        <th>Status</th>\r\n                        <th>Channel Name</th>\r\n                        <th>Provider</th>\r\n                        <th>Format</th>\r\n                        <th>Last Checked</th>\r\n                        <th>Actions</th>\r\n                      </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                      {channels.map((channel) => (\r\n                        <tr key={channel._id}>\r\n                          <td className=\"text-center\">\r\n                            <FontAwesomeIcon\r\n                              icon={faCircle}\r\n                              color={channel.isLive ? 'green' : 'red'}\r\n                              title={channel.isLive ? 'Live' : 'Down'}\r\n                            />\r\n                          </td>\r\n                          <td>{channel.name}</td>\r\n                          <td>{channel.provider}</td>\r\n                          <td>{channel.format.toUpperCase()}</td>\r\n                          <td>\r\n                            {channel.lastChecked \r\n                              ? new Date(channel.lastChecked).toLocaleString() \r\n                              : 'Never'}\r\n                          </td>\r\n                          <td>\r\n                            <Button\r\n                              variant=\"outline-secondary\"\r\n                              size=\"sm\"\r\n                              className=\"me-1\"\r\n                              onClick={() => handleCheckChannelStatus(channel._id)}\r\n                              disabled={checkingStatus && channelBeingChecked === channel._id}\r\n                            >\r\n                              {checkingStatus && channelBeingChecked === channel._id ? (\r\n                                <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\r\n                              ) : (\r\n                                <FontAwesomeIcon icon={faSync} />\r\n                              )}\r\n                            </Button>\r\n                            <Button\r\n                              variant=\"outline-primary\"\r\n                              size=\"sm\"\r\n                              className=\"me-1\"\r\n                              onClick={() => copyToClipboard(channel.url)}\r\n                            >\r\n                              <FontAwesomeIcon icon={faCopy} />\r\n                            </Button>\r\n                            <Button\r\n                              variant=\"outline-info\"\r\n                              size=\"sm\"\r\n                              className=\"me-1\"\r\n                              onClick={() => handleEditClick(channel)}\r\n                            >\r\n                              <FontAwesomeIcon icon={faEdit} />\r\n                            </Button>\r\n                            <Button\r\n                              variant=\"outline-danger\"\r\n                              size=\"sm\"\r\n                              onClick={() => handleDeleteClick(channel)}\r\n                            >\r\n                              <FontAwesomeIcon icon={faTrash} />\r\n                            </Button>\r\n                          </td>\r\n                        </tr>\r\n                      ))}\r\n                    </tbody>\r\n                  </Table>\r\n                </div>\r\n              )}\r\n            </Card.Body>\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      \r\n      {/* Edit Channel Modal */}\r\n      <Modal show={showEditModal} onHide={() => setShowEditModal(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Edit Channel</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form>\r\n            <Form.Group className=\"mb-3\">\r\n              <Form.Label>Channel Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                value={editName}\r\n                onChange={(e) => setEditName(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-3\">\r\n              <Form.Label>Channel URL</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                value={editUrl}\r\n                onChange={(e) => setEditUrl(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-3\">\r\n              <Form.Label>Provider</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                value={editProvider}\r\n                onChange={(e) => setEditProvider(e.target.value)}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-3\">\r\n              <Form.Label>Format</Form.Label>\r\n              <Form.Select\r\n                value={editFormat}\r\n                onChange={(e) => setEditFormat(e.target.value)}\r\n              >\r\n                <option value=\"m3u\">M3U</option>\r\n                <option value=\"m3u8\">M3U8</option>\r\n                <option value=\"mp4\">MP4</option>\r\n                <option value=\"hls\">HLS</option>\r\n                <option value=\"other\">Other</option>\r\n              </Form.Select>\r\n            </Form.Group>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setShowEditModal(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"primary\" onClick={handleSaveEdit} disabled={isProcessing}>\r\n            {isProcessing ? (\r\n              <>\r\n                <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\r\n                <span className=\"ms-2\">Saving...</span>\r\n              </>\r\n            ) : (\r\n              <>Save Changes</>\r\n            )}\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n      \r\n      {/* Delete Confirmation Modal */}\r\n      <Modal show={showDeleteModal} onHide={() => setShowDeleteModal(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Confirm Deletion</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          Are you sure you want to delete the channel \"{channelToDelete?.name}\"?\r\n          This action cannot be undone.\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setShowDeleteModal(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"danger\" onClick={handleConfirmDelete} disabled={isProcessing}>\r\n            {isProcessing ? (\r\n              <>\r\n                <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\" />\r\n                <span className=\"ms-2\">Deleting...</span>\r\n              </>\r\n            ) : (\r\n              <>Delete</>\r\n            )}\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default AdminPanel;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}